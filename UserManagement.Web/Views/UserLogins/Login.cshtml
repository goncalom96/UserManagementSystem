@model UserManagement.Web.Models.LoginViewModel

@{
    ViewBag.Title = "Login";
}

<style>
    .login-container {
        display: flex;
        flex-wrap: wrap;
        flex-direction: column;
        align-items: center;
    }

        .login-container * {
            width: 300px;
        }

        .login-container h1 {
            text-align: center;
        }

        .login-container form {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }

        .login-container input {
            background-color: rgba(240, 240, 240, 0.9);
        }

    .half-btn {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        align-items: center;
        gap: 2px;
    }

        .half-btn a {
            width: 149px;
            text-align: center;
            align-content: center;
        }

    .btn-outline-secondary {
        color: black;
        background-color: lightgray;
        border-color: lightgray;
    }
</style>

<section class="login-container">
    <div class="row">
        <h1>LOG IN</h1>
    </div>
    <br />
    <div class="row">
        @* Using: É um bloco que usará um objeto que implementa IDisposable. No caso de formulários HTML em ASP.NET MVC, isso é usado para criar e fechar automaticamente um formulário HTML.*@
        @* Html.BeginForm: Esse método gera o código HTML para iniciar um formulário.*@
        @* FormMethod.Post: Especifica que o formulário será enviado usando o método HTTP POST. A alternativa seria FormMethod.Get.*@
        @using (Html.BeginForm("Login", "UserLogins", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.LabelFor(m => m.UserName, new { @class = "form-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", autocomplete = "off" })
                    @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "text-danger small" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Password, new { @class = "form-label col-md-2" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                    @*@Html.TextBoxFor(m => m.Password, new { @class = "form-control", type = "password" }) Também se pode meter assim*@
                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger small" })
                </div>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-success fw-bold text-uppercase">Sign in</button>
            </div>

            <div class="form-group">
                <div class="half-btn">
                    <a id="RegisteUser" class="btn btn-outline-secondary btn-sm" href="@Url.Action("Register", "UserLogins")">Sign Up</a>
                    <a id="ChangePassword" class="btn btn-outline-secondary btn-sm" href="@Url.Action("ForgotPassword", "UserLogins")">Forgot password?</a>
                </div>
            </div>

            @Html.ValidationSummary(true, "", new { @class = "text-danger small" })
        }
    </div>
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}